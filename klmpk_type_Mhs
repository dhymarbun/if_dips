# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▓▓▓▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓▓▓▓██████▓▓▓▓▓▓▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓█████████████▓▓▓▓▓▓▓▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓▓▓▓████████████████████████▓▓▓▓▓▓▓▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓▓▓██████████████████████████████████▓▓▓▓▓▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▓▓▓▓▓████████████████████████████████████████▓▓▓▓▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓▓██████████▓▓███████████████████░▒▒▓███████████▓▓▓▓▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▓▓▓▓████████████░▒▓██████████████████░▓██░▓█▓▓██████████▓▓▓▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓█████████▓▒▒██▓▓▒▒░▓██████████████▒░▓█▒░█▓░▓█▓▓█████████▓▓▓▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓████████▓██▓░▓▒▒▓█▒▒▒████████▓▓███████▓▓▓█▓░▓▓░▒▓░██████████▓▓▓▓▒░░░░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░▒▓▓▓▓████████▓░░███░░▒▓▓▓██████████▒░░▒██████████▓█▓░▓▒▒▓▓▓▓▓████████▓▓▓▓▒░░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░▒▓▓▓▓███████▓▓▓█▓░▓█▓▒████████████▓░░░░░░▓███████████████▒▒▓█▓░█████████▓▓▓▒░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░▒▓▓▓▓██████████▒░▓██▒▓███████████▓▒░░░░░░░░░░▒▓████████████▒▓███░▓██████████▓▓▓▒░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░▒▓▓▓████████▒▒████▒░███████████▓▒░░░░░░░░░░░░░░░░▒▓██████████▒▒▒▒▓█▓░▒████████▓▓▓▓▒░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░▒▓▓▓▓█████████▒▒▒▒▒▒█████████▓█▓░░░░░░░░░░░░░░░░░░░░░░▓█▓██████████▒░▓░▓██████████▓▓▓▒░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░▒▓▓▓████████▓▒▒▒██▓▒▓████████▒░▒░░░░▓▓▓▒▒▒▒▒▒▒▒▒▒▓▓▓░░░░▒░▒████████▓▓█▒░▓▒▒█████████▓▓▓▓▒░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░▓▓▓▓█████████▒▒▒▒▒▒▓████████▒░░░░░░░░▓█████▓░░▓█████▓░░░░░░░░▒█████████░░▒██▓▒█████████▓▓▓▒░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░▒▓▓▓████████▓░█▓█▓▒▒████████▓░░░░░░░░░▒██▓▒▒░░░░░░▒▓▓██▒░░░░░░░░░▓█████████▓▒░▒▓░█████████▓▓▓▒░░░░░░░░░░░░░
# ░░░░░░░░░░░░▒▓▓▓████████▓░▒▒▒█▒█████████▒░░░░▓▓▓▒▓▓▓▒░░░░░░░░░░░░░░▒▓▓▓▒▓▓▓░░░░▒████████▒▒█▒████████████▓▓▓▓░░░░░░░░░░░░
# ░░░░░░░░░░░▒▓▓▓████████▒▒█▓▒░░▒████████▒░░░░░▓███▓░░░░░░░░░░░░░░░░░░░░▓███▓░░░░░▒████████▓█▓░▒▒▒▒████████▓▓▓▒░░░░░░░░░░░
# ░░░░░░░░░░▒▓▓▓██████████▓░▓███████████▓░░░░░░▒█▒░░░░░░░░░░░▓▓░░░░░░░░░░░▒▓▒░░░░░░▓█████████░██▓█▒▓█████████▓▓▒░░░░░░░░░░
# ░░░░░░░░░▒▓▓▓████████▓▒▒▒▒░░██████▓██▓░░░░░░░▓░░░░░░░░░▒▒▒░██░▒▒▒░░░░░░░░░▓░░░░░░░▓██▓█████▓▒▒░▓████████████▓▓▓░░░░░░░░░
# ░░░░░░░░░▓▓▓████████▓▒▓██████████▒░██▒░░░▒▒▓█▒░░░░░░░▒▓▓▓▒▒██▒▒▓▓▓▒░░░░░░░░█▓▒▒░░░░██░▒████████▒▒▒▒▓████████▓▓▓▒░░░░░░░░
# ░░░░░░░░▒▓▓████████▓▓█▓▒▒▒█████▓█░░██░░░░▒▓█▓░░░░░░▒▓▓▓▓▓░▓▒▓▓░▓▓▓▓▒░░░░░░░▓█▓▒░░░░▓█░░█▓█████▒▒███▒▓████████▓▓▓▒░░░░░░░
# ░░░░░░░▒▓▓▓████████▓▓▒▒▒▓█████▓░█▓░▓▓░░░░░░▒▓░░░░░▓▓▓▓▓▓▒░█░▒█░▓▓▓▓▓▓▒░░░░░▓▒░░░░░░▒▓░▓█░▓████▓▒▓█▓░▓█████████▓▓▓▒░░░░░░
# ░░░░░░▒▓▓▓████████▓▒▒▒▒▒▓█████▒░▒█▒▓▒░░░░░░░▓░░░░░▒▓▓▓▓▓▒░█░▒█░▓▓▓▓▓▓▓▒░░░░▓░░░░░░░▒▓▒█▒░▒██████▓▒▓██▓████████▓▓▓▓░░░░░░
# ░░░░░▒▓▓▓████████▓▒▒▒▒▓██████░█▒░░▓▓▒░░░░░▒▓█░░░░░░░▒▓▓▓▒▒█░▒█░▓▓▓▓▓▓▒░░░░░█▓▒░░░░░▒▓▓░░▒█░██████▒▒░▒▒▒████████▓▓▓▒░░░░░
# ░░░░▒▓▓▓████████▓▒▓▓██▓█████▓░░█▓░▒█▒░░░▒▓███▓░░░░░░░▒▓▓▓▒█░▒█░▓▓▓▓▒░░░░░░▓███▓▒░░░▒█▒░▓█░░▓█████▓▒▒▒▒▒█████████▓▓▓▓▒░░░
# ░▒▓▓▓▓▓███████████▓▓▒░██████▓░░░██▒█▒░░░░░░░▒▓▓░░░░░░▒▓▓▓▒█▒▒▓▒▓▓▒░░░░░░░▓▓▒░░░░░░░▒█▒██░░░▓█████▓▓▓▒▒▒▓██████████▓▓▓▓▓▒
# ░░▓▓▓██████████▓▒▒▓▓▒░█████▓█▓▒░░▒▓█▓░░░░░░░░░▒▓░░░░░░▓▓▓▒█▒▓▒▒▓▓░░░░░░░▓▒░░░░░░░░░▓█▓▒░░▒▓█▓█████▓░███▒▒██████████▓▓▓▒░
# ░░░▓▓▓████████████▓▓▓██████░▓███▓░░▓█░░░░░░░░░░░░░░░░░░▒▓▒█▒▓▒▒▓▓░░░░░░░░░░░░░░░░░░█▓░░▓███▓░▓████▓░▓█▓░▒█████████▓▓▓▒░░
# ░░░▒▓▓▓████████████████████░░░░░░▓▓░█▓░░░░░░░░░░░░░░░░░▒▓▒▓▒▓▒▒▓▓▒▒░░░░░░░░░░░░░░░▓█░▓▓░░░░░░███████▓▒▒▓██████████▓▓▓░░░
# ░░░░▓▓▓████████████████████▓░░░░░░▒█▓█▒░░░░░░░░░░░▒▒▓▓▓▓▓░▓▒▓▒▒▓▓▓▓▓▓▒▒▒░░░░░░░░░▒█▓█▒░░░░░░▓█████████████████████▓▓▒░░░
# ░░░░▒▓▓███████████████████▒▓██▓▓▓▒░░▒▓█▒░░░░░▒▓▓▓▓▓▓▓▓▓▓▓░█░▒▓▒▓▓▓▓▓▓▓▓▓▓▓▒░░░░░▓█▓▒░░▒▓▓▓██▓▒███████████████████▓▓▓▒░░░
# ░░░░▒▓▓███████████████████▒░▒▓▓▓▒▒▓▓░░▒█▒░░░░▓▓▓▓▓▓▓▓▓▓▓▓░█░░█░▓▓▓▓▓▓▓▓▓▓▓▒░░░░▓█▒░░▓▓▒▒▓▓▓▒░▒███████████████████▓▓▓▒░░░
# ░░░░▒▓▓███████████████████▓░░░░░░░░░▒▓▓▓██▒░░░▒▓▓▓▓▓▓▓▓▓▒▒▓░░▒▒▒▓▓▓▓▓▓▓▓▓▓░░░▒██▓▓▓▒░░░░░░░░░▓███████████████████▓▓▓░░░░
# ░░░░▒▓▓████████████████████▒░░░░░░░░░░░░░▒██▒░░▒▓▓▓▓▓▒░░░█▒░░░▓░▒▓▓▓▓▓▓▒▒░░▒██▒░░░░░░░░░░░░░▒████████████████████▓▓▓░░░░
# ░░░░▒▓▓▓████████████████████▓▒▒▒▓▓█▓▓▓▓▓▓▓▓▓██▓▒░░▒▒▓▒░▓▓▓████▓▓░▒▓▓▒▒░░▒▓██▓▓▓▓▓▓▓▓▓█▓▒▒▒▒▓█████████████████████▓▓▓░░░░
# ░░░░░▓▓▓███████████████████▓█████▒░░░░░░░░░░░░▒███▓▓▒▒░░░░▒▒▒▒░░░░▒▒▓▓███▒░░░░░░░░░░░░▒█████▓████████████████████▓▓▓░░░░
# ░░░░░▓▓▓███████████████████░▒▓▓▒░░░░░░░░░▒▓▓▓▓▓▒░░░▒██░░░░▒▓▓▒░░░░██▒░░░▒▓▓▓▓▓▒░░░░░░░░░▒▓▓▒░████████████████████▓▓▒░░░░
# ░░░░░▒▓▓████████████████████░░░░░░░░░░░░▓█▒▒░░░░░░░▓█▒░░░░▒▓▓░░░░░▒██░░░░░░░▒▒█▓░░░░░░░░░░░░████████████████████▓▓▓▒░░░░
# ░░░░░▒▓▓▓████████████████████▒░░░░░░░░▒██░░░░░░░░░▓██▒░░░░▒▓▓░░░░░░██▓░░░░░░░░░██▒░░░░░░░░▒█████████████████████▓▓▓░░░░░
# ░░░░░░▓▓▓██████████████████████▓▒▒▒▒▓███▓░░░░░░░░░███░░░░░░▒█░░░░░░███░░░░░░░░░▓███▓▒▒▒▒▓███████████████████████▓▓▒░░░░░
# ░░░░░░▓▓▓▓████████████████████▒▒▒███████░░░░░░░░░▓███▓░░░▒▓▒█░░░░░▓███▓░░░░░░░░░███████▒▒▒▓████████████████████▓▓▓▒░░░░░
# ░░░░░░▒▓▓▓███████████████████▒▒▒░░██▓▒▒░░░░░░░░░▒█████░░░▒▒▒▒▒░░░░█████▒░░░░░░░░░▒▒▓██░░▒▒▒████████████████████▓▓▓░░░░░░
# ░░░░░░░▓▓▓▓███████████████████▓▓▒░▓███▒░░░░░░░▒█▓██████▒░░░░░░░░▒██████▓█▒░░░░░░░▒███▓░▒▓▓████████████████████▓▓▓▒░░░░░░
# ░░░░░░░▒▓▓▓█████████████████████▒░░████▓█▓▓▓███▓░████▓███▒░░░░▒███▓████░▓███▓▓▓█▓▓███░░▒█████████████████████▓▓▓▓░░░░░░░
# ░░░░░░░░▒▓▓▓████████████████████▒░░░▓█▓░▓██▒▓██▓░▒███░▓█▓▓█▓▓█▓▓█▓░███▒░▓██▓▒██▓░▓█▓░░░▒█████████████████████▓▓▓▒░░░░░░░
# ░░░░░░░░░▓▓▓█████████████████████░░░░▒█▒░▒█▓░▓██░░░▓█░░██░░▓▓▒░██░░█▓░░░██▓░▓█▒░▒█▒░░░░▓████████████████████▓▓▓▒░░░░░░░░
# ░░░░░░░░░▒▓▓▓████████████████████▒░░░░░█▒░░▓▓░░▓▓░░░█▓░░▓▓░░░░▓▓░░▓█░░░▓▓░░▓▓░░▒█░░░░░▒█████████████████████▓▓▓░░░░░░░░░
# ░░░░░░░░░░▒▓▓▓████████████████████▒░░░░░█▓░░▓▓░░██░░░█▒░░█▓░░▓█░░▒█░░░▓█░░▓▓░░▓▓░░░░░▒█████████████████████▓▓▓░░░░░░░░░░
# ░░░░░░░░░░░▒▓▓▓████████████████████▒░░░░░▒▒░░█▒░▒█▓░░▓█░░▓█░░█▓░░█▓░░▓█▒░▒█░░▒▒░░░░░▒█████████████████████▓▓▓▒░░░░░░░░░░
# ░░░░░░░░░░░░▓▓▓██████████████████████▓▒░░░░░░░▒░░▒▓░░░█░░▒█▓▒█▒░░█░░░▓▒░░▒░░░░░░░▒▓██████████████████████▓▓▓▒░░░░░░░░░░░
# ░░░░░░░░░░░░▒▓▓▓████████████████████████▓▒░░░░░░░░░░░░░░░░▒▓▓▒░░░░░░░░░░░░░░░░▒▓████████████████████████▓▓▓▒░░░░░░░░░░░░
# ░░░░░░░░░░░░░▒▓▓▓████████████████████████████▓▓▒▒░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓████████████████████████████▓▓▓▒░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░▒▓▓▓███████████████████████████████████▓▓▒░░░░░░░░▒▓▓███████████████████████████████████▓▓▓▒░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░▓▓▓███████████████████████████████████████▓░░▓███████████████████████████████████████▓▓▓▒░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░▒▓▓███████████▓▒▓████████████████████████████████████████████████████▓▒▒▓██████████▓▓▓▒░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░▓▓▓▓█████████░▒█▓███▓██████████████████████████████████████████████▒▒██▒▒▓███████▓▓▓▒░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░▓▓▓███████▓▓█░▒███▒░▒▒███████████████████████████████████▓▓██▓░███▓░▓█▓▒▓██████▓▓▓▒░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░▓▓▓███████▓▒▒███▓░▒▒████▒░██▒▒█████▓▓█████▓▓▓█████▒▒▓███▓░▒▒▓▒░████▓▓▓▓██████▓▓▓▒░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░▓▓▓████████████▒░▒▓███▓░▒▓▒▒░████▒▒░▓████░█▒░███▓░▓░▓███▒░█▓▒░▓█████████████▓▓▒░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░▒▓▓▓██████████████████░▓▓░▓▓░███▒░▓▒▒████░░░████▒░▒▒░▓███▒█████████████████▓▓▓░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░▓▓▓████████████████████████▓███▒███▒▓███▒█▒▒███▒▓███▓████████████████████▓▓▓▒░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█████████████████████████████████████████████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░▒▓▓▓▓▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓██████████████████████████████▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓▓▓▒░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░▒░░░░░░░░░░░░░░▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒░░░░░░░░░░░░░░▒▒░░░░░░░░░░░░░░░░░░░░░░
# ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░


#  ▄████▄   ▒█████  ▓█████▄ ▓█████     ▄▄▄▄ ▓██   ██▓   ▓█████▄  ██░ ██▓██   ██▓
# ▒██▀ ▀█  ▒██▒  ██▒▒██▀ ██▌▓█   ▀    ▓█████▄▒██  ██▒   ▒██▀ ██▌▓██░ ██▒▒██  ██▒
# ▒▓█    ▄ ▒██░  ██▒░██   █▌▒███      ▒██▒ ▄██▒██ ██░   ░██   █▌▒██▀▀██░ ▒██ ██░
# ▒▓▓▄ ▄██▒▒██   ██░░▓█▄   ▌▒▓█  ▄    ▒██░█▀  ░ ▐██▓░   ░▓█▄   ▌░▓█ ░██  ░ ▐██▓░
# ▒ ▓███▀ ░░ ████▓▒░░▒████▓ ░▒████▒   ░▓█  ▀█▓░ ██▒▓░   ░▒████▓ ░▓█▒░██▓ ░ ██▒▓░
# ░ ░▒ ▒  ░░ ▒░▒░▒░  ▒▒▓  ▒ ░░ ▒░ ░   ░▒▓███▀▒ ██▒▒▒     ▒▒▓  ▒  ▒ ░░▒░▒  ██▒▒▒ 
#   ░  ▒     ░ ▒ ▒░  ░ ▒  ▒  ░ ░  ░   ▒░▒   ░▓██ ░▒░     ░ ▒  ▒  ▒ ░▒░ ░▓██ ░▒░ 
# ░        ░ ░ ░ ▒   ░ ░  ░    ░       ░    ░▒ ▒ ░░      ░ ░  ░  ░  ░░ ░▒ ▒ ░░  
# ░ ░          ░ ░     ░       ░  ░    ░     ░ ░           ░     ░  ░  ░░ ░     
# ░                  ░                      ░░ ░         ░              ░ ░     

# TYPE MAHASISWA (MHS) 
# DEFINISI DAN SPESIFIKASI TYPE 
#     type Mhs: <NIM: string, Nama: string, Kelas: character, Nilai: list of integer> 
#     {type Mhs terdiri atas NIM, Nama, dan Kelas mahasiswa, serta kumpulan Nilai kuis yang pernah dikerjakan, dengan maksimal jumlah mengerjakan adalah 10 kali. Nilai mahasiswa memiliki rentang antara 0-100} 

# DEFINISI DAN SPESIFIKASI KONSTRUKTOR 
def MakeMhs(NIM, Nama, Kelas, Nilai):
    return [NIM, Nama, Kelas, Nilai]

# Konso: elemen, List -> List
# Konso(e,L) menghasilkan sebuah list dari e dan L dengan e sebagai elemen pertama
# Realisasi
def Konso(e,L):
    return [e] + L

# Konsi: List, elemen -> List
# Konsi(L,e) -> menghasilkan sebuah list dari L dan e dengan e sebagai elemen terakhir
# Realisasi
def Konsi(L,e):
    return L + [e]

#DEFINISI DAN SPESIFIKASI SELEKTOR
# FirstElmt: List tidak kosong -> elemen
# FirstElmt(L) Menghasilkan elemen pertama list L
# Realisasi
def FirstElmt(L):
    return L[0]

# LastElmt: List tidak kosong -> elemen
# LastElmt(L): mengembalikan elemen terakhir list L
# Realisasi
def LastElmt(L):
    return L[-1]

# Tail : List tidak kosong -> List
# Tail(L) : Menghasilkan list tanpa elemen pertama list L, mungkin kosong
# Realisasi
def Tail(L):
    return L[1:]

# Head : List tidak kosong -> List
# Head(L) : Menghasilkan list tanpa elemen terakhir list L, mungkin kosong
# Realisasi
def Head(L):
    return L[:-1]

# DEFINSI DAN SPESIFIKASI SELEKTOR 
def SelectNIM(Mhs):
    return Mhs[0]

def SelectKelas(Mhs):
    return Mhs[2]

def SelectNilai(Mhs):
    return Mhs[3]

# DEFINISI DAN SPESIFIKASI PREDIKAT
# IsEmpty : List -> boolean
# IsEmpty(L) benar jika list kosong
# Realisasi
def IsEmpty(L):
    return L == [] or L == [[]] or L == ""

# IsOneElmt: List -> boolean
# IsOneElmt(L) adalah benar jika list L hanya mempunyai satu elemen
# Realisasi
def IsOneElmt(L):
    if IsEmpty(L):
        return False
    else:
        return Tail(L) == [] and Head(L) == []

# Max2(a,b): 2 integer -> integer 
# Max2(a,b) mengembalikan Nilai yang terbesar dari antara 2 input berupa Nilai integer
def Max2(a, b):
    return ((a + b) + abs(a - b)) // 2

# DEFINISI DAN SPESIFIKASI FUNGSI YANG MENGOPERASIKAN LIST
# MaxElmt(L): List of integer -> integer
# MaxElmt(L) mengembalikan elemen maksimum dari list L
def MaxElmt(L):
    if IsEmpty(L):
        return 0 
    else:
        max_tail = MaxElmt(Tail(L))
        return FirstElmt(L) if FirstElmt(L) > max_tail else max_tail
    
# SumElmt : List of integer -> integer
# SumElmt(L) menghasilkan jumlahan dari setiap elemen di list L   
def SumElmt(L):
    if IsEmpty(L):
        return 0
    else:
        return FirstElmt(L) + SumElmt(Tail(L))  

# NbElmt : List -> integer
# NbElmt(L) : Menghasilkan banyaknya elemen list, nol jika kosong
# Realisasi
def NbElmt(L):
    if IsEmpty(L):
        return 0
    else:
        return 1 + NbElmt(Tail(L))

# DEFINSII DAN SPESIFIKASI OPERATOR 
# SetMhs(Mhs) mengembalikan setMhs NIM harus unik
def SetMhs(Mhs):
    if IsEmpty(Mhs):
        return []
    if IsMhsNIM(SelectNIM(FirstElmt(Mhs)), Tail(Mhs)):
        return SetMhs(Tail(Mhs))
    return Konso(FirstElmt(Mhs), SetMhs(Tail(Mhs)))

# AvgGrade(NilaiMhs) mengembalikan rata-rata Nilai mahasiswa 
def AvgGrade(NilaiMhs):
    if IsEmpty(NilaiMhs):
        return 0
    return SumElmt(NilaiMhs) // NbElmt(NilaiMhs)

# IsMhsNIM(NIM, Mhs) mengembalukan True jika NIM yang dimasukkan adalah anggota Mahasiswa 
def IsMhsNIM(NIM, SetMhs):
    if IsEmpty(SetMhs):
        return False
    if NIM == SelectNIM(FirstElmt(SetMhs)):
        return True
    return IsMhsNIM(NIM, Tail(SetMhs))

# SetMhsLulus(Mhs) mengembalikan himpunan mahasiswa yang lulus, yaitu yang memiliki Nilai rata-rata lebih dari sama dengan 70
def SetMhsLulus(SetMhs):
    if IsEmpty(SetMhs):
        return []
    if AvgGrade(SelectNilai(FirstElmt(SetMhs))) >= 70:
        return Konso(FirstElmt(SetMhs), SetMhsLulus(Tail(SetMhs)))
    return SetMhsLulus(Tail(SetMhs))

# BanyakSetMhsLulus(Mhs) mengembalikan banyaknya mahasiswa yang lulus, yaitu yang memiliki Nilai rata-rata lebih dari sama dengan 70
def BanyakSetMhsLulus(SetMhs):
    if IsEmpty(SetMhs):
        return 0
    if AvgGrade(SelectNilai(FirstElmt(SetMhs))) >= 70:
        return 1 + BanyakSetMhsLulus(Tail(SetMhs))
    return BanyakSetMhsLulus(Tail(SetMhs))

# MhsNoQuizKelas(kelas, SetMhs) mengembalikan himpunan mahasiswa yang tidak mengerjakan kuis sama sekali di suatu kelas tertentu sesuai dengan input nama dan kelas
def MhsNoQuizKelas(kelas, SetMhs):
    if IsEmpty(SetMhs):
        return []
    if kelas == SelectKelas(FirstElmt(SetMhs)) and IsEmpty(
        SelectNilai(FirstElmt(SetMhs))
    ):
        return Konso(
            FirstElmt(SetMhs), MhsNoQuizKelas(kelas, Tail(SetMhs))
        )
    return MhsNoQuizKelas(kelas, Tail(SetMhs))

# BanyakMhsNoQuiz(SetMhs) mengembalikan himpunan mahasiswa yang tidak mengerjakan kuis sama sekali di suatu kelas tertentu sesuai dengan Nama Kelas di-input-kan sebagai parameter
def BanyakMhsNoQuiz(SetMhs):
    if IsEmpty(SetMhs):
        return 0
    if IsEmpty(SelectNilai(FirstElmt(SetMhs))):
        return 1 + BanyakMhsNoQuiz(Tail(SetMhs))
    return BanyakMhsNoQuiz(Tail(SetMhs))

# HighestGrade(Mhs) mengembalikan Nilai tertinggi dari SetMhs
def HighestGrade(SetMhs):
    if IsEmpty(SelectNilai(FirstElmt(SetMhs))):
        return HighestGrade(Tail(SetMhs))
    if IsOneElmt(SetMhs):
        return MaxElmt(SelectNilai(FirstElmt(SetMhs)))
    return Max2(
        MaxElmt(SelectNilai(FirstElmt(SetMhs))), HighestGrade(Tail(SetMhs))
    )

# HighestGradeKelas(Kelas, SetMhs) mengembalikan Nilai tertinggi dari SetMhs di kelasnya tetapi dengan output nama dan kelasnya juga nilainya
def HighestGradeKelas(Kelas, SetMhs):
    if IsEmpty(SetMhs):
        return None

    mhs = FirstElmt(SetMhs)

    if SelectKelas(mhs) == Kelas and not IsEmpty(SelectNilai(mhs)):
        nim, nama, kelas, nilai = SelectNIM(mhs), mhs[1], SelectKelas(mhs), MaxElmt(SelectNilai(mhs))
        highest_mhs = HighestGradeKelas(Kelas, Tail(SetMhs))

        if highest_mhs is None:
            return (nim, nama, kelas, nilai)
        
        if nilai > highest_mhs[3]:
            return (nim, nama, kelas, nilai)
        else:
            return highest_mhs
    else:
        return HighestGradeKelas(Kelas, Tail(SetMhs))

# APLIKASI
import pprint

# Fungsi untuk mencetak data mahasiswa
def print_set_mhs(SetMhs):
    print("SET MAHASISWA :")
    pprint.pprint(SetMhs)

# Fungsi untuk mencetak mahasiswa yang lulus
def print_set_mhs_lulus(SetMhs):
    print("SET MAHASISWA LULUS :")
    pprint.pprint(SetMhsLulus(SetMhs))

# Fungsi untuk mencetak mahasiswa yang tidak mengerjakan kuis di kelas tertentu
def print_MhsNoQuizKelas(kelas, SetMhs):
    print(f"SET MAHASISWA TIDAK MENGERJAKAN KUIS DI KELAS {kelas} :")
    pprint.pprint(MhsNoQuizKelas(kelas, SetMhs))

# Fungsi untuk mencetak nilai tertinggi dari semua kelas
def print_HighestGrade(SetMhs):
    print("NILAI TERTINGGI DARI SEMUA KELAS :")
    print(HighestGrade(SetMhs))

# Fungsi untuk mencetak mahasiswa dengan nilai tertinggi di kelas tertentu
def print_HighestGradeKelas(kelas, SetMhs):
    print(f"MAHASISWA DENGAN NILAI TERTINGGI DARI KELAS {kelas} :")
    print(HighestGradeKelas(kelas, SetMhs))

# Fungsi untuk mencetak jumlah mahasiswa yang tidak mengerjakan kuis dari semua kelas
def print_BanyakMhsNoQuiz(SetMhs):
    print("BANYAK MAHASISWA YANG TIDAK MENGERJAKAN KUIS DARI SEMUA KELAS :")
    print(BanyakMhsNoQuiz(SetMhs))

# Fungsi untuk mencetak jumlah mahasiswa yang lulus dari semua kelas
def print_banyak_mhs_lulus(SetMhs):
    print("BANYAK MAHASISWA YANG LULUS DARI SEMUA KELAS :")
    print(BanyakSetMhsLulus(SetMhs))

# Data mahasiswa
data_mahasiswa = SetMhs(
[
    MakeMhs("5001", "Alin", "B", [80, 94, 92]),
    MakeMhs("001", "Baskara", "D", [55, 45, 60]),
    MakeMhs("003", "Nadin", "F", [78, 85, 90]),
    MakeMhs("2001", "Kunto", "C", [90, 69, 90]),
    MakeMhs("007", "Naura", "A", [55, 65]),
    MakeMhs("9999", "Messi", "H", [77, 69, 71]),
    MakeMhs("123", "Naura", "E", []),
    MakeMhs("069", "Khalifa", "F", []),
    MakeMhs("768", "Einar", "A", [100, 80, 54]),
    MakeMhs("666", "Kanye", "D", [40, 20, 80]),
    MakeMhs("001", "Farhan", "A", [85, 90, 95]),
    MakeMhs("102", "Umar", "B", [72, 68, 80]),
    MakeMhs("403", "Citra", "C", [91, 87, 92]),
    MakeMhs("054", "Kirana", "D", [77, 82, 88]),
    MakeMhs("025", "Yusuf", "E", [100, 70, 78]),
    MakeMhs("046", "Olivia", "F", [88, 93, 91]),
    MakeMhs("007", "Ulan", "G", [80, 85, 87])
])

# Panggilan fungsi
print_set_mhs(data_mahasiswa)
print()
# Mahasiswa yang lulus dari SetMHS (yang rata-rata nilainya lebih dari 70)
print_set_mhs_lulus(data_mahasiswa)
print()
# Mahasiswa yang tidak mengerjakan kuis sesuai kelasnya 
print_MhsNoQuizKelas("A", data_mahasiswa)
print_MhsNoQuizKelas("B", data_mahasiswa)
print_MhsNoQuizKelas("C", data_mahasiswa)
print_MhsNoQuizKelas("D", data_mahasiswa)
print_MhsNoQuizKelas("E", data_mahasiswa)
print_MhsNoQuizKelas("F", data_mahasiswa)
print_MhsNoQuizKelas("G", data_mahasiswa)
print()
# Nilai tertinggi dari semua kelas (paralel)
print_HighestGrade(data_mahasiswa)
print()
# Nilai tertinggi di kelas masing-masing 
print_HighestGradeKelas("A", data_mahasiswa)
print_HighestGradeKelas("B", data_mahasiswa)
print_HighestGradeKelas("C", data_mahasiswa)
print_HighestGradeKelas("D", data_mahasiswa)
print_HighestGradeKelas("E", data_mahasiswa)
print_HighestGradeKelas("F", data_mahasiswa)
print_HighestGradeKelas("G", data_mahasiswa)
print()
# Jumlah mahasiswa yang tidak mengerjakan quiz dari semua kelas
print_BanyakMhsNoQuiz(data_mahasiswa)
print()
# Jumlah mahasiswa yang lulus dari semua kelas
print_banyak_mhs_lulus(data_mahasiswa)

# ⠄⣴⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣀
# ⠄⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
# ⠄⣾⣿⠿⠛⣉⣁⣤⣤⣤⣤⣬⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠛⠛⠛⠻⠿⠿⣿
# ⣾⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣶⣤⡈
# ⣿⣿⣿⣿⠛⢋⠉⠩⠉⢩⣙⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠿⠿⣿⣿⣿
# ⣿⣿⣿⣿⣿⣿⠿⠶⢶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣶⣏⣁⡁⣐⣆⠈⢻
# ⣿⣿⣿⣿⣿⣿⣿⣿⡿⢋⣥⣤⡌⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣭⣭⣭⣿⣾⣿
# ⣿⣿⣿⣿⣿⣿⣿⠿⢀⣿⣿⡿⢁⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
# ⢿⣿⣿⣿⣿⣿⢋⣴⣿⣿⠏⢡⣾⣿⣿⣿⣿⣿⣿⣿⡟⣿⣿⣿⣿⣿⣿⣿⣿⣿
# ⡈⠙⠛⠛⠻⢃⣼⣿⣿⠏⣐⠻⠿⠿⠿⠿⣿⣿⣿⣿⣿⡜⢿⣿⣿⣿⣿⣿⣿⣿
# ⣿⣿⣿⡿⢳⣾⣿⣿⠋⣼⣿⣷⣄⠄⠄⠄⠄⠈⠄⢀⣾⣿⣆⠹⣿⣿⡿⠛⠋⠁
# ⣿⣿⡟⣀⣿⣿⣿⠛⣠⣄⢹⣿⣿⣧⣤⣄⣀⣤⣶⣾⣿⡿⣿⡆⢻⡟⠁⢀⡀⠄
# ⣿⣿⣷⣿⣿⣿⢣⣾⣿⣿⠄⠉⠄⠄⠈⠉⠉⠃⠉⠉⠛⠃⠉⠈⣾⣷⠾⠟⠁⢠
# ⠈⠛⠿⣿⣿⣿⣿⣿⣿⠃⣶⣆⢰⣶⣶⣶⣶⠶⠒⢀⣀⣄⣠⣴⡟⠁⠄⠄⣰⣿
# ⠄⠄⠄⠄⠈⠻⠿⠿⠏⣾⡿⠃⠈⠉⠉⠛⠄⠘⠛⣻⣿⣿⣿⣿⣿⡇⣠⣾⣿⣿
                                                  
                                                                                                                                                                                                          
                                                                                                                                                                                                          
                                                                                                                                                                                                          
                                                                                                                                                                                                          
                                                                                                                                                                                                          
                                                                                                                                                                                                          
                                                                                                                                                                                                          
                                                                                                                                                                                                          
                                                                                                                                                                                                          
                                                                                                                                                                                                          
